#!/bin/bash

echo "==========================================="
echo "    INICIANDO A APLICA√á√ÉO MAC-API"
echo "==========================================="

echo ""
echo "1. VERIFICANDO SE A APLICA√á√ÉO J√Å EST√Å RODANDO..."
echo "-------------------------------------------"
if pgrep -f "python.*app.py\|uvicorn.*app:app" > /dev/null; then
    echo "‚ö†Ô∏è  Aplica√ß√£o j√° est√° rodando:"
    ps aux | grep -E "(python.*app|uvicorn.*app)" | grep -v grep
    echo ""
    echo "Para reiniciar, execute: pkill -f 'python.*app.py'"
    exit 0
else
    echo "‚úÖ Nenhuma inst√¢ncia da aplica√ß√£o encontrada. Prosseguindo..."
fi

echo ""
echo "2. VERIFICANDO DEPEND√äNCIAS..."
echo "-------------------------------------------"
if command -v python3 &> /dev/null; then
    echo "‚úÖ Python3 encontrado: $(python3 --version)"
else
    echo "‚ùå Python3 n√£o encontrado!"
    exit 1
fi

if command -v pip3 &> /dev/null; then
    echo "‚úÖ pip3 encontrado"
else
    echo "‚ùå pip3 n√£o encontrado!"
    exit 1
fi

echo ""
echo "3. VERIFICANDO ESTRUTURA DO PROJETO..."
echo "-------------------------------------------"
if [ -f "app.py" ]; then
    echo "‚úÖ app.py encontrado"
else
    echo "‚ùå app.py n√£o encontrado no diret√≥rio atual!"
    echo "   Navegue para o diret√≥rio do projeto primeiro"
    exit 1
fi

if [ -f "requirements.txt" ]; then
    echo "‚úÖ requirements.txt encontrado"
else
    echo "‚ö†Ô∏è  requirements.txt n√£o encontrado"
fi

echo ""
echo "4. INSTALANDO/VERIFICANDO DEPEND√äNCIAS..."
echo "-------------------------------------------"
echo "Instalando depend√™ncias necess√°rias..."
pip3 install fastapi uvicorn --user

echo ""
echo "5. INICIANDO A APLICA√á√ÉO..."
echo "-------------------------------------------"
echo "Iniciando aplica√ß√£o em background..."
nohup python3 app.py > mac-api.log 2>&1 &
APP_PID=$!

echo "‚úÖ Aplica√ß√£o iniciada com PID: $APP_PID"
echo "   Log: mac-api.log"

# Aguardar um pouco para a aplica√ß√£o inicializar
sleep 3

echo ""
echo "6. VERIFICANDO SE A APLICA√á√ÉO INICIOU..."
echo "-------------------------------------------"
if netstat -tlnp 2>/dev/null | grep ":8000 " > /dev/null; then
    echo "‚úÖ Aplica√ß√£o rodando na porta 8000"
    echo "   Processo: $(ps aux | grep -E 'python.*app.py' | grep -v grep)"
else
    echo "‚ùå Aplica√ß√£o n√£o est√° rodando na porta 8000"
    echo "   Verificando logs:"
    tail -10 mac-api.log
    exit 1
fi

echo ""
echo "7. TESTANDO A APLICA√á√ÉO..."
echo "-------------------------------------------"
echo "Testando endpoint local..."
if curl -s http://127.0.0.1:8000/ > /dev/null; then
    echo "‚úÖ Aplica√ß√£o respondendo localmente"
    curl -s http://127.0.0.1:8000/ | head -1
else
    echo "‚ùå Aplica√ß√£o n√£o responde localmente"
    echo "   Verificando logs:"
    tail -10 mac-api.log
fi

echo ""
echo "8. TESTANDO VIA NGINX..."
echo "-------------------------------------------"
echo "Testando via nginx..."
if curl -s https://macapi.xyz/ > /dev/null; then
    echo "‚úÖ Aplica√ß√£o acess√≠vel via HTTPS"
else
    echo "‚ö†Ô∏è  Problema ao acessar via HTTPS - verifique nginx"
fi

echo ""
echo "==========================================="
echo "        INICIALIZA√á√ÉO CONCLU√çDA"
echo "==========================================="
echo ""
echo "üìã RESUMO:"
echo "   ‚Ä¢ PID da aplica√ß√£o: $APP_PID"
echo "   ‚Ä¢ Log da aplica√ß√£o: mac-api.log"
echo "   ‚Ä¢ Para parar: kill $APP_PID"
echo "   ‚Ä¢ Para ver logs: tail -f mac-api.log"
echo ""
echo "üîß COMANDOS √öTEIS:"
echo "   ‚Ä¢ Ver processos: ps aux | grep python"
echo "   ‚Ä¢ Ver porta 8000: netstat -tlnp | grep :8000"
echo "   ‚Ä¢ Testar API: curl http://127.0.0.1:8000/"
